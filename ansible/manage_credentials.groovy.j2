// Import necessary classes
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import hudson.util.Secret
import jenkins.model.Jenkins
import com.cloudbees.plugins.credentials.SecretBytes

// Import specific credential classes
import com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl

// Make variables accessible within closures by removing 'def'
errors = []

domain = Domain.global()
store = SystemCredentialsProvider.getInstance().getStore()

def updateOrAddCredential(existingCred, newCred) {
    try {
        if (existingCred != null) {
            store.updateCredentials(domain, existingCred, newCred)
            println("Updated existing credential with ID: ${newCred.id}")
        } else {
            store.addCredentials(domain, newCred)
            println("Added new credential with ID: ${newCred.id}")
        }
    } catch (Exception e) {
        def errorMessage = "Failed to add or update credential with ID '${newCred.id}': ${e.message}"
        println(errorMessage)
        errors << errorMessage
    }
}

def createCredential(credentialName, closure) {
    try {
        closure()
    } catch (ClassNotFoundException e) {
        def errorMessage = "Required class not found for ${credentialName}: ${e.message}"
        println(errorMessage)
        errors << errorMessage
    } catch (Exception e) {
        def errorMessage = "Exception during ${credentialName} operation: ${e.message}"
        println(errorMessage)
        errors << errorMessage
    }
}

// AWS Credentials
createCredential("AWS Credentials") {
    def awsCredId = "aws-credentials"
    def existingAwsCred = store.getCredentials(domain).find { it.id == awsCredId }
    def awsAccessKeyId = "{{ credentials_data['aws-credentials']['access_key_id'] }}"
    def awsSecretAccessKey = "{{ credentials_data['aws-credentials']['secret_access_key'] }}"
    def awsCred = new AWSCredentialsImpl(
        CredentialsScope.GLOBAL,
        awsCredId,
        awsAccessKeyId,
        awsSecretAccessKey,
        "AWS Credentials"
    )
    updateOrAddCredential(existingAwsCred, awsCred)
}

// AWS Account ID (Text)
createCredential("AWS Account ID") {
    def awsAccountIdCredId = "aws-account-id"
    def existingAwsAccountIdCred = store.getCredentials(domain).find { it.id == awsAccountIdCredId }
    def awsAccountId = "{{ credentials_data['aws-account-id'] }}"
    def awsAccountIdCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        awsAccountIdCredId,
        "AWS Account ID",
        Secret.fromString(awsAccountId)
    )
    updateOrAddCredential(existingAwsAccountIdCred, awsAccountIdCred)
}

// AWS Hosted Zone ID (Text)
createCredential("AWS Hosted Zone ID") {
    def awsHostedZoneIdCredId = "aws-hosted-zone-id"
    def existingAwsHostedZoneIdCred = store.getCredentials(domain).find { it.id == awsHostedZoneIdCredId }
    def awsHostedZoneId = "{{ credentials_data['aws-hosted-zone-id'] }}"
    def awsHostedZoneIdCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        awsHostedZoneIdCredId,
        "AWS Hosted Zone ID",
        Secret.fromString(awsHostedZoneId)
    )
    updateOrAddCredential(existingAwsHostedZoneIdCred, awsHostedZoneIdCred)
}

// GCP Project ID (Text)
createCredential("GCP Project ID") {
    def gcpProjectCredId = "gcp-project"
    def existingGcpProjectCred = store.getCredentials(domain).find { it.id == gcpProjectCredId }
    def gcpProjectId = "{{ credentials_data['gcp-project'] }}"
    def gcpProjectCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        gcpProjectCredId,
        "GCP Project ID",
        Secret.fromString(gcpProjectId)
    )
    updateOrAddCredential(existingGcpProjectCred, gcpProjectCred)
}

// GCP Credentials File
{% if credentials_data['gcp-credentials-file'] is defined %}
createCredential("GCP Credentials File") {
    def gcpFileCredId = "gcp-credentials-file"
    def existingGcpFileCred = store.getCredentials(domain).find { it.id == gcpFileCredId }
    def gcpFileBytes = SecretBytes.fromBytes("{{ gcp_file_base64 }}".decodeBase64())
    def gcpFileCred = new FileCredentialsImpl(
        CredentialsScope.GLOBAL,
        gcpFileCredId,
        "GCP Credentials File",
        "{{ gcp_file_name }}",
        gcpFileBytes
    )
    updateOrAddCredential(existingGcpFileCred, gcpFileCred)
}
{% endif %}

// Twilio Auth Token (Text)
createCredential("Twilio Auth Token") {
    def twilioAuthTokenCredId = "twilio-auth-token"
    def existingTwilioAuthTokenCred = store.getCredentials(domain).find { it.id == twilioAuthTokenCredId }
    def twilioAuthToken = "{{ credentials_data['twilio-auth-token'] }}"
    def twilioAuthTokenCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        twilioAuthTokenCredId,
        "Twilio Auth Token",
        Secret.fromString(twilioAuthToken)
    )
    updateOrAddCredential(existingTwilioAuthTokenCred, twilioAuthTokenCred)
}

// Azure ACR Credentials (Username/Password)
createCredential("Azure ACR Credentials") {
    def azureAcrCredId = "azure-acr-credentials"
    def existingAzureAcrCred = store.getCredentials(domain).find { it.id == azureAcrCredId }
    def azureAcrUsername = "{{ credentials_data['azure-acr-credentials']['username'] }}"
    def azureAcrPassword = "{{ credentials_data['azure-acr-credentials']['password'] }}"
    def azureAcrCred = new UsernamePasswordCredentialsImpl(
        CredentialsScope.GLOBAL,
        azureAcrCredId,
        "Azure ACR Credentials",
        azureAcrUsername,
        azureAcrPassword
    )
    updateOrAddCredential(existingAzureAcrCred, azureAcrCred)
}

// Azure Client ID (Text)
createCredential("Azure Client ID") {
    def azureClientIdCredId = "azure-client-id"
    def existingAzureClientIdCred = store.getCredentials(domain).find { it.id == azureClientIdCredId }
    def azureClientId = "{{ credentials_data['azure-client-id'] }}"
    def azureClientIdCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        azureClientIdCredId,
        "Azure Client ID",
        Secret.fromString(azureClientId)
    )
    updateOrAddCredential(existingAzureClientIdCred, azureClientIdCred)
}

// Azure Subscription ID (Text)
createCredential("Azure Subscription ID") {
    def azureSubscriptionIdCredId = "azure-subscription-id"
    def existingAzureSubscriptionIdCred = store.getCredentials(domain).find { it.id == azureSubscriptionIdCredId }
    def azureSubscriptionId = "{{ credentials_data['azure-subscription-id'] }}"
    def azureSubscriptionIdCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        azureSubscriptionIdCredId,
        "Azure Subscription ID",
        Secret.fromString(azureSubscriptionId)
    )
    updateOrAddCredential(existingAzureSubscriptionIdCred, azureSubscriptionIdCred)
}

// Azure Tenant ID (Text)
createCredential("Azure Tenant ID") {
    def azureTenantIdCredId = "azure-tenant-id"
    def existingAzureTenantIdCred = store.getCredentials(domain).find { it.id == azureTenantIdCredId }
    def azureTenantId = "{{ credentials_data['azure-tenant-id'] }}"
    def azureTenantIdCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        azureTenantIdCredId,
        "Azure Tenant ID",
        Secret.fromString(azureTenantId)
    )
    updateOrAddCredential(existingAzureTenantIdCred, azureTenantIdCred)
}

// Azure Client Secret (Text)
createCredential("Azure Client Secret") {
    def azureClientSecretCredId = "azure-client-secret"
    def existingAzureClientSecretCred = store.getCredentials(domain).find { it.id == azureClientSecretCredId }
    def azureClientSecret = "{{ credentials_data['azure-client-secret'] }}"
    def azureClientSecretCred = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        azureClientSecretCredId,
        "Azure Client Secret",
        Secret.fromString(azureClientSecret)
    )
    updateOrAddCredential(existingAzureClientSecretCred, azureClientSecretCred)
}

if (!errors.isEmpty()) {
    println("\nCredential management completed with errors:")
    errors.each { println("- " + it) }
    // Do not exit with System.exit(1) to prevent Jenkins from crashing
} else {
    println("\nCredential management completed successfully.")
}
