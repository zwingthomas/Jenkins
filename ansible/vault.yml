---
- name: Configure Vault server and upload credentials from credentials.yml
  hosts: vault
  become: yes
  vars_files:
    - credentials.yml
  vars:
    tls_cert_path: "/etc/vault/vault.crt"
    tls_key_path: "/etc/vault/vault.key"
    vault_config_path: "/etc/vault/config.hcl"
    trusted_cert_store: "/usr/local/share/ca-certificates/vault.crt"
    gcp_secret_name_prefix: "vault-unseal-key-"
  collections:
    - google.cloud

  tasks:
    - name: Ensure GCP service account key file exists
      stat:
        path: "{{ credentials['gcp-credentials-file'] }}"
      register: gcp_key_file
      delegate_to: localhost
      become: false

    - name: Fail if GCP service account key file is missing
      fail:
        msg: "GCP service account key file not found at {{ credentials['gcp-credentials-file'] }}"
      when: not gcp_key_file.stat.exists
      delegate_to: localhost
      become: false

    - name: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
      ansible.builtin.shell: |
        export GOOGLE_APPLICATION_CREDENTIALS={{ credentials['gcp-credentials-file'] }}
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "{{ credentials['gcp-credentials-file'] }}"
      delegate_to: localhost
      become: false

    - name: Ensure required packages are installed
      apt:
        name:
          - git
          - python3
          - python3-pip
        state: present

    - name: Install dependencies
      apt:
        update_cache: yes
        name:
          - unzip
          - curl
          - gnupg
          - openssl
          - jq
          - ca-certificates

    - name: Install jmespath Python library
      pip:
        name: jmespath
      become: yes

    - name: Check jmespath installation
      shell: python3 -m pip show jmespath
      register: jmespath_check
    - debug:
        var: jmespath_check.stdout

    - name: Download Vault binary
      get_url:
        url: "https://releases.hashicorp.com/vault/1.15.3/vault_1.15.3_linux_amd64.zip"
        dest: /tmp/vault.zip

    - name: Install Vault
      unarchive:
        src: /tmp/vault.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Vault directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/vault
        - /opt/vault/data

    - name: Generate private key for Vault
      command: >
        openssl genrsa -out {{ tls_key_path }} 4096
      args:
        creates: "{{ tls_key_path }}"

    - name: Generate self-signed certificate for Vault
      command: >
        openssl req -new -x509
        -key {{ tls_key_path }}
        -out {{ tls_cert_path }}
        -days 365
        -subj "/C=US/ST=State/L=City/O=Organization/OU=IT/CN={{ ansible_host }}"
        -addext "subjectAltName=DNS:{{ ansible_host }},IP:127.0.0.1"
      args:
        creates: "{{ tls_cert_path }}"

    - name: Set permissions for TLS files
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: '0600'
      with_items:
        - "{{ tls_key_path }}"
        - "{{ tls_cert_path }}"

    - name: Fetch Vault certificate to controller
      fetch:
        src: "{{ tls_cert_path }}"
        dest: "/tmp/vault.crt"
        flat: yes

    - name: Copy Vault certificate to trusted store on the remote
      copy:
        src: "/tmp/vault.crt"
        dest: "{{ trusted_cert_store }}"
        owner: root
        group: root
        mode: '0644'

    - name: Update trusted certificates
      command: update-ca-certificates

    - name: Create Vault configuration file
      copy:
        dest: "{{ vault_config_path }}"
        content: |
          storage "file" {
            path = "/opt/vault/data"
          }

          listener "tcp" {
            address     = "0.0.0.0:8200"
            tls_cert_file = "{{ tls_cert_path }}"
            tls_key_file  = "{{ tls_key_path }}"
          }

          api_addr = "https://{{ ansible_host }}:8200"
          cluster_addr = "https://{{ ansible_host }}:8201"
          disable_mlock = true
        owner: root
        group: root
        mode: '0644'

    - name: Create Vault systemd service
      copy:
        dest: /etc/systemd/system/vault.service
        content: |
          [Unit]
          Description=Vault
          Requires=network-online.target
          After=network-online.target

          [Service]
          ExecStart=/usr/local/bin/vault server -config={{ vault_config_path }}
          ExecReload=/bin/kill --signal HUP $MAINPID
          KillSignal=SIGTERM
          Restart=on-failure
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Start and enable Vault
      systemd:
        name: vault
        enabled: yes
        state: started

    - name: Wait for Vault to respond (sealed/uninitialized state allowed)
      uri:
        url: "https://{{ ansible_host }}:8200/v1/sys/health"
        method: GET
        validate_certs: false
        status_code: [200, 501, 503]
      retries: 10
      delay: 5
      register: vault_health_check

    - name: Initialize Vault (only if uninitialized)
      shell: |
        vault operator init -format=json
      when: vault_health_check.json.initialized is defined and not vault_health_check.json.initialized
      register: vault_init
      args:
        executable: /bin/bash
      failed_when: vault_init.rc != 0 and vault_init.stdout == ""
      ignore_errors: false

    - name: Debug vault_init stdout
      debug:
        msg: "{{ vault_init.stdout | default('Undefined') }}"

    - name: Store unseal keys and root token to Google Secret Manager
      google.cloud.gcp_secret_manager:
        project: "{{ credentials['gcp-project-id'] }}"
        name: "{{ gcp_secret_name_prefix }}{{ item.key }}"
        secret_data: "{{ item.value }}"
        state: present
      loop: >
        {{
          [
            {"key": "unseal_keys", "value": vault_init.stdout | from_json | json_query('unseal_keys_b64')},
            {"key": "root_token", "value": vault_init.stdout | from_json | json_query('root_token')}
          ]
        }}
      when: vault_init is defined

    - name: Unseal Vault
      shell: |
        vault operator unseal {{ item }}
      loop: "{{ vault_init.stdout | from_json | json_query('unseal_keys_b64') }}"
      when: vault_health_check.json.sealed
      args:
        executable: /bin/bash