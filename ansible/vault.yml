---
- name: Configure Vault server and upload credentials from credentials.yml
  hosts: vault
  become: yes
  vars_files:
    - credentials.yml
  vars:
    tls_cert_path: "/etc/vault/vault.crt"
    tls_key_path: "/etc/vault/vault.key"
    vault_config_path: "/etc/vault/config.hcl"
    trusted_cert_store: "/usr/local/share/ca-certificates/vault.crt"
    gcp_secret_name_prefix: "vault-unseal-key-"
    vault_base_path: "secret/mycredentials"
  collections:
    - google.cloud
    - community.general

  tasks:

    - name: Install dependencies
      apt:
        update_cache: yes
        name:
          - unzip
          - curl
          - gnupg
          - openssl
          - jq
          - ca-certificates
          - python3-venv
    
    - name: Create a virtual environment on remote
      become: false
      command: python3 -m venv /tmp/ansible_venv
    
    - name: Set ansible_python_interpreter to use the virtual environment Python on remote
      set_fact:
        ansible_python_interpreter: /tmp/ansible_venv/bin/python

    - name: Install requirements in the virtual environment on remote
      become: false
      command: /tmp/ansible_venv/bin/pip install google-auth jmespath requests google-api-python-client google-cloud-secret-manager
        
    - name: Ensure GCP service account key file exists
      stat:
        path: "{{ credentials['gcp-credentials-file'] }}"
      register: gcp_key_file
      delegate_to: localhost
      become: false

    - name: Fail if GCP service account key file is missing
      fail:
        msg: "GCP service account key file not found at {{ credentials['gcp-credentials-file'] }}"
      when: not gcp_key_file.stat.exists
      delegate_to: localhost
      become: false

    - name: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
      ansible.builtin.shell: |
        export GOOGLE_APPLICATION_CREDENTIALS={{ credentials['gcp-credentials-file'] }}
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "{{ credentials['gcp-credentials-file'] }}"
      delegate_to: localhost
      become: false

    - name: Download Vault binary
      get_url:
        url: "https://releases.hashicorp.com/vault/1.15.3/vault_1.15.3_linux_amd64.zip"
        dest: /tmp/vault.zip

    - name: Install Vault
      unarchive:
        src: /tmp/vault.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Create Vault directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /etc/vault
        - /opt/vault/data

    - name: Generate private key for Vault
      command: >
        openssl genrsa -out {{ tls_key_path }} 4096
      args:
        creates: "{{ tls_key_path }}"

    - name: Generate self-signed certificate for Vault
      command: >
        openssl req -new -x509
        -key {{ tls_key_path }}
        -out {{ tls_cert_path }}
        -days 365
        -subj "/C=US/ST=State/L=City/O=Organization/OU=IT/CN={{ ansible_host }}"
        -addext "subjectAltName=IP:{{ ansible_host }},IP:127.0.0.1"
      args:
        creates: "{{ tls_cert_path }}"

    - name: Set permissions for TLS files
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: '0600'
      with_items:
        - "{{ tls_key_path }}"
        - "{{ tls_cert_path }}"

    - name: Fetch Vault certificate to controller
      fetch:
        src: "{{ tls_cert_path }}"
        dest: "/tmp/vault.crt"
        flat: yes

    - name: Copy Vault certificate to trusted store on the remote
      copy:
        src: "/tmp/vault.crt"
        dest: "{{ trusted_cert_store }}"
        owner: root
        group: root
        mode: '0644'

    - name: Update trusted certificates
      command: update-ca-certificates

    - name: Create Vault configuration file
      copy:
        dest: "{{ vault_config_path }}"
        content: |
          storage "file" {
            path = "/opt/vault/data"
          }

          listener "tcp" {
            address     = "0.0.0.0:8200"
            tls_cert_file = "{{ tls_cert_path }}"
            tls_key_file  = "{{ tls_key_path }}"
          }

          api_addr = "https://{{ ansible_host }}:8200"
          cluster_addr = "https://{{ ansible_host }}:8201"
          disable_mlock = true
        owner: root
        group: root
        mode: '0644'

    - name: Create Vault systemd service
      copy:
        dest: /etc/systemd/system/vault.service
        content: |
          [Unit]
          Description=Vault
          Requires=network-online.target
          After=network-online.target

          [Service]
          ExecStart=/usr/local/bin/vault server -config={{ vault_config_path }}
          ExecReload=/bin/kill --signal HUP $MAINPID
          KillSignal=SIGTERM
          Restart=on-failure
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Start and enable Vault
      systemd:
        name: vault
        enabled: yes
        state: started

    - name: Wait for Vault to respond (sealed/uninitialized state allowed)
      uri:
        url: "https://{{ ansible_host }}:8200/v1/sys/health"
        method: GET
        status_code: [200, 501, 503]
      retries: 10
      delay: 5
      register: vault_health_check

    # If vault is not initialized, initialize it and store secrets:
    - name: Initialize Vault (only if uninitialized)
      shell: |
        vault operator init -format=json
      when: vault_health_check.json.initialized is defined and vault_health_check.json.initialized == false
      register: vault_init
      args:
        executable: /bin/bash
      failed_when: vault_init.rc != 0 and vault_init.stdout == ""
      ignore_errors: false

    - name: Copy GCP credentials file to remote server
      copy:
        src: auth_gcp.json
        dest: /etc/vault/auth_gcp.json
        owner: root
        group: root
        mode: '0600'

    # Store unseal keys and root token if Vault was just initialized
    - name: Store unseal keys and root token to Google Secret Manager
      google.cloud.gcp_secret_manager:
        project: "{{ credentials['gcp-project'] }}"
        name: "{{ gcp_secret_name_prefix }}{{ item.key }}"
        value: "{{ item.value | join('\n') if item.key == 'unseal_keys' else item.value }}"
        state: present
        auth_kind: serviceaccount
        service_account_file: /etc/vault/auth_gcp.json
      loop: >
        {{
          [
            {"key": "unseal_keys", "value": vault_init.stdout | from_json | json_query('unseal_keys_b64')},
            {"key": "root_token", "value": vault_init.stdout | from_json | json_query('root_token')}
          ]
        }}
      when: vault_init is defined

    - name: Remove GCP credentials file from remote
      file:
        path: /etc/vault/auth_gcp.json
        state: absent
      when: vault_init is defined

    # If Vault was already initialized, retrieve keys from GCP Secret Manager
    - name: Re-copy GCP credentials file to remote server (for retrieval)
      copy:
        src: auth_gcp.json
        dest: /etc/vault/auth_gcp.json
        owner: root
        group: root
        mode: '0600'
      when: vault_health_check.json.initialized is defined and vault_health_check.json.initialized == true

    - name: Retrieve unseal_keys from GCP if already initialized
      google.cloud.gcp_secret_manager:
        project: "{{ credentials['gcp-project'] }}"
        name: "{{ gcp_secret_name_prefix }}unseal_keys"
        auth_kind: serviceaccount
        service_account_file: /etc/vault/auth_gcp.json
        state: present
        read: true
      register: retrieved_unseal_keys
      when: vault_health_check.json.initialized is defined and vault_health_check.json.initialized == true

    - name: Retrieve root_token from GCP if already initialized
      google.cloud.gcp_secret_manager:
        project: "{{ credentials['gcp-project'] }}"
        name: "{{ gcp_secret_name_prefix }}root_token"
        auth_kind: serviceaccount
        service_account_file: /etc/vault/auth_gcp.json
        state: present
        read: true
      register: retrieved_root_token
      when: vault_health_check.json.initialized is defined and vault_health_check.json.initialized == true

    - name: Remove GCP credentials file from remote (after retrieval)
      file:
        path: /etc/vault/auth_gcp.json
        state: absent
      when: vault_health_check.json.initialized is defined and vault_health_check.json.initialized == true

    # Unseal Vault if sealed, using retrieved keys if previously initialized
    - name: Unseal Vault (if previously initialized and sealed)
      shell: |
        vault operator unseal {{ item }}
      loop: "{{ (vault_init is defined) | ternary((vault_init.stdout | from_json | json_query('unseal_keys_b64')), (retrieved_unseal_keys.value.split('\n'))) }}"
      when: vault_health_check.json.sealed
      args:
        executable: /bin/bash

    # Set root_token fact (either from new init or from retrieval)
    - name: Set vault_root_token fact
      set_fact:
        vault_root_token: "{{ (vault_init is defined) | ternary((vault_init.stdout | from_json | json_query('root_token')), retrieved_root_token.value) }}"

    # Write policy for KV v2 (Adjust paths for v2 if needed)
    - name: Write policy to allow create/update/read on secret/mycredentials/*
      shell: |
        export VAULT_ADDR="https://{{ ansible_host }}:8200"
        export VAULT_TOKEN="{{ vault_root_token }}"
        cat > /tmp/mycreds-policy.hcl <<EOF
        path "secret/data/mycredentials/*" {
          capabilities = ["create", "update", "read"]
        }

        path "secret/metadata/mycredentials/*" {
          capabilities = ["list", "create", "update", "read"]
        }
        EOF
        vault policy write mycreds-policy /tmp/mycreds-policy.hcl
      args:
        executable: /bin/bash

    - name: Create token with mycreds-policy
      shell: |
        export VAULT_ADDR="https://{{ ansible_host }}:8200"
        export VAULT_TOKEN="{{ vault_root_token }}"
        vault token create -policy=mycreds-policy -format=json
      register: new_token
      args:
        executable: /bin/bash

    - name: Set VAULT_TOKEN for subsequent tasks
      set_fact:
        mycreds_token: "{{ new_token.stdout | from_json | json_query('auth.client_token') }}"

    - name: Export VAULT_TOKEN environment variable
      set_fact:
        vault_env: {"VAULT_ADDR": "https://{{ ansible_host }}:8200", "VAULT_TOKEN": "{{ mycreds_token }}"}

    - name: Write credentials to Vault
      include_tasks: vault_write.yml
      loop: "{{ credentials | dict2items }}"
      loop_control:
        loop_var: item

    - name: Load GCP credentials file content from localhost
      delegate_to: localhost
      become: false
      slurp:
        src: "{{ credentials['gcp-credentials-file'] }}"
      register: gcp_creds_file

    - name: Write GCP credentials file content to Vault
      shell: >
        vault kv put {{ vault_base_path }}/gcp-credentials-file value="{{ gcp_creds_file.content | b64decode }}"
      args:
        executable: /bin/bash